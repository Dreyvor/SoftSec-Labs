Q1. What class of bug are you reporting?                            [1 point]
	Input non-sanitized --> Arbitrary code execution
___

Q2. Describe the bug:                              [3 points = 0.5 + 0.5 + 2]
a) Where is the bug?
	File, line: command.cpp:97
	Function: pingCommand::exec
___

b) What capabilities does the bug give to the attacker? 
	Arbitrary command execution
___

c) What are the conditions under which the bug can be exploited, and describe
your exploit?
	We don't even need to create an user in the config file! We only need to have access to the command 'ping' which is the case. Our exploit uses the fact that the parser does not correctly sanitize the input (i.e. the address to ping in this case). Due to this, we can try to ping 'badIP' and insert a chain of command after that using semi-colon (i.e. 'ping badIP;$COMMAND#').

	The command we used ('ping badIP;whoami;pwd;/usr/bin/grassexternal.py&#') is decomposed in 4 parts:
		1. 'ping badIP;'	: To call pingCommand::exec
		2. 'whoami;'		: To check the user and show that we are 'cs412'
		3. 'pwd;'			: To show that we are able to run any command the user 'cs412' could run (i.e. 'pwd' cannot be ran in GRASS)
		4. '/usr/bin/grassexternal.py&#' : To show that we can run an arbitrary command. The '&#' at the end is to detach the command and run it in backgroud and ignore the rest of command.cpp:97 command.
___

Q3. Describe the fix for the bug:                       [2 points = 0.5 + 1.5]
a) Can the vulnerability be mitigated through automated techniques?    
   If yes, explain.

   TODO
___

b) Describe a code-fix for the bug. This must correspond to the submitted patch.
___
