Q1. What class of bug are you reporting?                            [1 point]
	Input non-sanitized --> Arbitrary code execution
___

Q2. Describe the bug:                              [3 points = 0.5 + 0.5 + 2]
a) Where is the bug?
	File, line: command.cpp:402-403
	Function: grepCommand::exec
___

b) What capabilities does the bug give to the attacker?
	Arbitrary code execution
___

c) What are the conditions under which the bug can be exploited, and describe
your exploit? 
	The user need to be logged in. No files are needed. A folder with the exploit name need to be created (or already existing). Then the user has to be in the directory (i.e. 'cd my_faulty_folder') and run a 'grep' command.

	In the grep execution (grepCommand::exec) the command given to the 'system'
	call begin with a 'cd $CURRENT_DIR;'. The exploit profites of this part. If
	the user is currently in a faulty directory (e.g.
	'rnd;whoami;grassexternal.py&#'), then the command passed to system will be
	'cd rnd ; whoami ; grassexternal.py&' as the '#' tells that the rest is a
	comment.
___

Q3. Describe the fix for the bug:                       [2 points = 0.5 + 1.5]
a) Can the vulnerability be mitigated through automated techniques?    
   If yes, explain.
   
   No we cannot use automatic techniques. We must code differently to sanitize the user's inputs (as given in the patch).
___

b) Describe a code-fix for the bug. This must correspond to the submitted patch.

	This is the same fix as the previous bug (i.e. bug_1).
	
	For this bug we chose to allow only the user to create folder that has 
	* alphanumerical characters (i.e. [a-zA-Z0-9])
	* others special characters (i.e. [_.\\-()])
	If the folder name is valid, then execute the 'mkdir' command. Otherwise,
	we do not execute the 'mkdir' command and warns the user.
___

